---
- name: Install and configure system dependencies, as root
  hosts: all
  become: yes
  tasks:
  #- name: Update Package Cache (apt/Ubuntu)
  #  apt:
  #    update_cache: yes
  - name: Install APT packages for python3, ffmpeg, PIL, RTC/I2C, NTP, UFW, and build tools
    package:
      name: ["python3-pip", "virtualenv", "ffmpeg", "git", "i2c-tools", "chrony", "ufw", "p7zip-full",
             "build-essential", "python3-dev", "libssl-dev", "libffi-dev", "libjpeg-dev", "zlib1g-dev",
             "xterm",  # Can disappear after system update...
             "cargo",  # Rust is required by python-cryptography build system
              "libatlas-base-dev",]  # For Numpy
      state: present
  - name: Install APT packages for Kivy
    package:
      name: ["libgl1-mesa-glx", "libgles2-mesa", "libegl1-mesa", "libmtdev1", "xclip", "xsel"]
        #"libsdl2-dev", "libsdl2-image-dev", "libsdl2-mixer-dev", "libsdl2-ttf-dev", "pkg-config", "libgl1-mesa-dev",
        #    "libgles2-mesa-dev", "libgstreamer1.0-dev", "libgstreamer1.0-dev", "git-core",
        #    "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "gstreamer1.0-plugins-ugly",
        #    "gstreamer1.0-omx", "gstreamer1.0-alsa", "python-dev", "libmtdev-dev", "xclip", "xsel"]
      state: present
  - name: Enable RTC overlay in config.txt
    lineinfile:
      path: /boot/config.txt
      line: 'dtoverlay=i2c-rtc,ds1307'
      insertafter: '[all]'
  - name: Enable RTC kernel module
    lineinfile:
      path: /etc/modules
      line: 'rtc-ds1307'
  - name: Remove wrong premature abort of hwclock-set script
    copy:
      src: hwclock-set
      dest: /lib/udev/hwclock-set
  #- name: Install bcm2835 lib for Epaper screen (USELESS FOR PYTHON ??)
  #  script:
  #    cmd: files/install_bcm2835_lib.sh
  #    chdir: "/var/tmp/"
  #    creates: "/usr/local/lib/libbcm2835.a"
  - name: Copy custom boot checkups script to /etc (e.g. to regenerate SSH key if needed)
    copy:
      src: custom_boot_checkups.sh
      dest: /etc/custom_boot_checkups.sh
  - name: Create a cron entry for custom boot checkups script
    cron:
      name: "custom-checkups-on-boot"  # Identifies crontab entry
      special_time: reboot
      job: "bash /etc/custom_boot_checkups.sh"
#  - name: Set static IP for ethernet interface (Bookworm)
#    copy:
#      dest: "/etc/network/interfaces.d/eth0"
#      content: |
#        allow-hotplug eth0
#        iface eth0 inet static
#          address 192.168.10.23/24
#          #network 10.0.0.0
#          netmask 255.255.255.0
#          gateway 192.168.10.1
#  - name: Set static IP for ethernet interface
#    blockinfile:
#      path: /etc/dhcpcd.conf
#      state: "present"
#      block: |
#        # define static profile
#        profile static_eth0
#        static ip_address=192.168.10.23/24
#        static routers=192.168.10.1
#        static domain_name_servers=192.168.10.1
#        nogateway
#
#        # fallback to static profile on eth0
#        interface eth0
#        fallback static_eth0
  - name: Configure chrony as NTP server for IP camera
    blockinfile:
      path: /etc/chrony/chrony.conf
      state: "present"
      block: |
        local stratum 8
        manual
        allow 192.168.10.0/24
  - name: Setup UFW Firewall
    script:
      cmd: files/setup_ufw.sh

- name: Install and configure python dependencies of wa-recorder, as user
  hosts: all
  tasks:
  - name: Install setup/deactivation scripts for i2s-microphone into local home
    script:
      cmd: files/install_i2smic_setup_scripts.sh
      creates: "{{ ansible_env.HOME }}/installers/i2smic_disable_on_boot.sh"
  - name: Clone ButtonShim examples repository
    git:
      repo: 'https://github.com/pimoroni/button-shim.git'
      dest: "{{ ansible_env.HOME }}/installers/pimoroni_buttonshim"
      version: "master"
  - name: Clone WaveShare E-paper examples repository
    git:
      repo: 'https://github.com/waveshare/e-Paper.git'
      dest: "{{ ansible_env.HOME }}/installers/waveshare_epaper"
      version: "master"
  - name: Install Waveshare LCD usage examples
    script:
      cmd: files/install_waveshare_lcd_examples.sh
      creates: "{{ ansible_env.HOME }}/installers/waveshare_1.3inch_lcd_hat_code"
  - name: Clone WaveShare audio hat drivers repository
    git:
      repo: 'https://github.com/waveshare/WM8960-Audio-HAT.git'
      dest: "{{ ansible_env.HOME }}/installer/waveshare_wm8960_audio_hat.git"
      version: "master"
  - name: Setup new virtualenv with pip and basic build helpers
    pip:
      name: ["pip==23.0.1", "setuptools", "wheel",]
      virtualenv: "{{ ansible_env.HOME }}/.venv"
      virtualenv_python: "python3.11"
  - name: Create symbolic link to venv activation script
    file:
      src: "{{ ansible_env.HOME }}/.venv/bin/activate"
      dest: "{{ ansible_env.HOME }}/activate_virtualenv"
      state: link
  - name: Create symbolic link to venv site-packages folder
    file:
      src: "{{ ansible_env.HOME }}/.venv/lib/python3.11/site-packages"
      dest: "{{ ansible_env.HOME }}/site_packages_virtualenv"
      state: link
  - name: Install misc dependencies into venv
    pip:
      # If problems with cryptography/asn1, rust/cargo and zlib corruption, see https://stackoverflow.com/a/70628807
      name: ["poetry",
             "pillow", "numpy", #######"wiringpi==2.60.1",  # For E-paper control
             "spidev==3.8",
             "rpi-lgpio==0.6",   # Overrides RPi.GPIO package
              # Waveshare e-Paper.git installed RPi.GPIO and spidev o Bullseye,
             "git+https://github.com/waveshare/e-Paper.git#egg=waveshare_epd&subdirectory=RaspberryPi_JetsonNano/python",
             "smbus==1.1.post2",  # For button-shim control
             "picamera",
             "freetype-py==2.5.1",  # For DFRobot E-paper examples
             "adafruit-python-shell==1.10.0" ]  # For i2smic setup script
      virtualenv: "{{ ansible_env.HOME }}/.venv"
      virtualenv_python: "python3"
    environment:
      CFLAGS: "-fcommon"  # Necessary for RPi.GPIO compilation
  - name: Clone and link DFRobot e-paper V2 driver into venv (not pip-installable)
    script:
      cmd: files/install_dfrobot_2in13_v2_python_lib.sh
      creates: "~/venv/lib/python3.11/site-packages/dfrobot_rpi_display_v2_driver.pth"
  - name: Clone wa-recorder git repository
    git:
      repo: 'https://github.com/WitnessAngel/witness-angel-recorder-python.git'
      dest: "{{ ansible_env.HOME }}/witness-angel-recorder"
      version: "main"
      #depth: "1" - shallow clones are impractical
  - name: Remove git-based WA dependencies so that they are properly updated by poetry later
    pip:
      name: ["wacryptolib", "wacomponents"]
      state: "absent"
      virtualenv: "{{ ansible_env.HOME }}/.venv"
      virtualenv_python: "python3.11"
  - name: Delete 'src/' folder of venv, to ensure pip doesn't reuse obsolete git checkout data
    file:
      path: "{{ ansible_env.HOME }}/.venv/src"
      state: "absent"
  - name: Install wa-recorder dependencies with poetry
    script:
      cmd: files/install_poetry_dependencies.sh
      chdir: "{{ ansible_env.HOME }}/witness-angel-recorder/"
    environment:
      MAKEFLAGS: "-j2"  # Prevent flood of memory by 4 GCC processes
  - name: Create a cron entry for Recorder service launch at boot
    cron:
      name: "warecorder-launch-boot"
      special_time: reboot
      job: "sleep 60s ; XDG_RUNTIME_DIR=/run/user/$(id -u) {{ ansible_env.HOME }}/.venv/bin/python {{ ansible_env.HOME }}/witness-angel-recorder/main.py --service"
      # XDG_RUNTIME_DIR is necessary for PulseAudio, see https://wiki.archlinux.org/title/PulseAudio#Play_sound_from_a_non-interactive_shell_(systemd_service,_cron)
      # We sleep so that USB drive mounting has time to mount too, before WA service attempts to access it
  - name: Create a cron entry for Recorder service periodic re-launch
    cron:
      name: "warecorder-launch-periodic"
      minute: "*/5"
      job: "XDG_RUNTIME_DIR=/run/user/$(id -u) {{ ansible_env.HOME }}/.venv/bin/python {{ ansible_env.HOME }}/witness-angel-recorder/main.py --service"
  - name: Copy desktop shortcut to Recorder GUI
    copy:
      src: warecorder.desktop
      dest: "{{ ansible_env.HOME }}/Desktop/warecorder.desktop"
  - name: Precreate .witnessangel/ data folder
    file:
      path: "{{ ansible_env.HOME }}/.witnessangel"
      state: directory
  - name: Add shortcut to .witnessangel/ data folder on Desktop
    file:
      src: "{{ ansible_env.HOME }}/.witnessangel"
      dest: "{{ ansible_env.HOME }}/Desktop/WitnessAngelData"
      state: link

# TODO later : put MOTD for SSH connections!

